IMPORTANT

Make sure to update this file to include your NAME and PID so we can
associate your GitHub repo with your class enrollment.

All input.* and communicate.* files will be overwritten when we grade Lab 1.
Please refer to the website under the projects section for further instructions.
http://cseweb.ucsd.edu/classes/fa17/cse123-a/project.html

Name: Renxu Hu
PID: A92067683
File: README
All the high level description is writing here, please check

Clarification and Description of the Program
First of all, my program runs a little bit slower, and the reason for that is
I was using a relative different approach. However, the main approach is the 
same because I am using selective retransmission. However, instead of using 
the timeout as the main tool for retransmission, I am processing the linked 
list in the handle incoming acks. So for instance, if the message conrrupted,
then I handle the case to check what ack number has returned. I will usually
send back ack number + 1 frame to the receiver. For instance, if sender sends
frame 1, receiver sends back ack 1; later sender sends frame 2~4, receiver 
sends back ack 2 since 3 is lost. So the sender sends back frame 3. I am 
using the timeout only when the ack is corrupted. The reason why it is slower
since I am heavily run on memory, and also the linked list is heavier to 
manipulate. 
If I am having corrupted incoming ack, my timeout will figure out and then 
send back the frame, if received before, the receiver will ignore it.

Start from the first file sender.c:
I set all the sender's sequence number and last ack received and last frame sent
to be -1. The reason for that is because when there is no incoming frame, the 
number should not be around 0~15 which is the buffer size.

calculate_timeout function is used to calculate the timeout with the paramter.

The way that I am using for handle_incoming_acks is first check the possible 
size that left in window can slide which is calculating with the total frame size
- (LFS - LAR). Then I calculate the ack received number by using the ackNum that
pass from the receiver - the sender's last ack received. Then set the Last Ack
received = the ack number.

if((previousLAR <= sender->sendArr[recv_id].LFS) && (ackNo > previousLAR) && 
(ackNo <= sender->sendArr[recv_id].LFS)) 
this is the logic that I am using for checking the previous window, and check
if the sequence number that I received is inside the window, if it is inside
the window. Then the total frame size - 1. 

else if((previousLAR > sender->sendArr[recv_id].LFS) && ((ackNo > previousLAR) 
|| (ackNo <= sender->sendArr[recv_id].LFS))) 
This is the logic that I am using for chekcing the precious window at the 
wrap around case.
if the sequence number that I received is inside the window, if it is inside
the window. Then the total frame size - 1. 

Then is the sliding window part. So I am using the offset which equals to 
LFS - LAR. However, since I mentioned before, there is a variable called 
possible, which means possible frame left to send. So if the offset is 
greater than the possible. Then just let the offset = possible.
After that, let LFS equals to LFS + offset.

Then slide the window, and send back the sequence that is greater than
the current LFS and less than the LAR. If LFS == LAR, which means all
the frame has been received.

Handle_input_cmds first I split the message if it is longer than the frame size.
Then pop the cmd and change them to frame. I checked the window size at the end
since the number of message sent to the receiver cannot be greater than the 
receiver remaining windows.

Check_timeout is just checking if the time is less than the current time, then
it is timeout so I just send it back to receiver, if receiver has already received
then just ignore it.


Now is the receiver.c
First set all the slot to be not received, and set the window variable NFE, LFR
, and LAF. Set NFE to be 0, and others to be -1 since they should be less than 0

Handle incoming msgs are similr to handle incoming ack. The only difference is 
that, the receiver will update the ackNum differently. 

First check if the seq number equal to NFE, if it is not, means it is error, so
save the incoming msg and send back the LFR as the ack number.
If there is no error, then store and then send back the current seqNum.
Then send back the acknoledgement.

Frame:
My frame is in total 64 bytes, with 7 bytes encapsulated header, and 57 bytes 
data.
It has source id, destination id, seqence number and ack number, sameMsg means
whether the data is in the same message as previous. If it is, then it will be
1, if it is not, then it is 0. There is one byte (char) which is used to check
the corruption of the frame. First six bytes are all uint8_t type which will be
automatically wrapped around at 255.
